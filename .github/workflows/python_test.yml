name: Test1_python

on:
  push:
    branches:
      - main  # Se ejecuta en cada push a la rama principal
  pull_request:
    branches:
      - main  # También en los pull requests a la rama principal

jobs:
    apple_job:
      runs-on: ubuntu-latest
      steps:
        - name: Preparar la manzana 🍎
          run: echo "Lavando la manzana. prueba 2.."
        - name: Cortar la manzana
          run: echo "Cortando la manzana en rodajas..."
        - name: Verificar archivos después del checkout
          run: |
                echo "Contenido del repositorio:"
                ls -la
  
    banana_job:
      runs-on: ubuntu-latest
      steps:
        - name: Pelar la banana 🍌
          run: echo "Peleando la bananassss..."
        - name: Cortar la banana
          run: echo "Cortando la banana en trozos..."
  
    grape_job:
      runs-on: ubuntu-latest
      needs: [apple_job, banana_job]  # Espera a que apple_job y banana_job terminen
      steps:
        - name: Lavar las uvas 🍇
          run: echo "Lavando las uvas..."
        - name: Comer las frutas
          run: echo "Comiendo una ensalada de frutas 🍎🍌🍇"
        
  
    build_CI:
      name: CI - Integración Continua
      runs-on: ubuntu-latest
      needs: [apple_job, banana_job]  # Espera a que apple_job y banana_job terminen
      steps:
        - name: Checkout del código
          uses: actions/checkout@v4

        - name: Configurar Python
          uses: actions/setup-python@v4   
          with:
            python-version: '3.10'
        
        - name: Instalar dependencias
          run: pip install -r mle-intv-main/main_Train/config/requirements.txt
    
        - name: Mostrar directorio actual
          run: |
            echo "Directorio actual"
            pwd  # Muestra el directorio actual después de retroceder
            echo "Archivos y carpetas en el nuevo directorio:"
            ls -la
  
  
        - name: Configurar credenciales de AWS
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
  
        - name: Login en Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Construir la imagen Docker
          run: |
            docker build -t prueba_cd -f mle-intv-main/Application/Local/Dockerfile .
    
        - name: Mostrar las imagenes
          run: |
            echo "Imagenes"
            docker images
  
        - name: subir imagen a ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
            IMAGE_TAG: latest
            ACCESS_ID: 706013593978
          run: |
            docker tag prueba_cd:latest $ACCESS_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
            docker push $ACCESS_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG           

          #- name: Ejecutar pruebas antes de construir
          #  run: pytest tests/
 
        
  
    build_CD:
      name: CD - Despliegue Continuo
      runs-on: ubuntu-latest
      needs: [build_CI]
      steps:
        
        - name: Checkout del repositorio
          uses: actions/checkout@v4

        - name: Configurar credenciales de AWS
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Listar todas las instancias EC2
          run: |
            echo "📋 Listando todas las instancias EC2..."
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId, State.Name, Tags[*].Value]' --output table

        - name: Iniciar EC2
          id: start_ec2
          run: |
            INSTANCE_ID_EV=${{ secrets.EC2_INSTANCE_ID }}
            INSTANCE_ID=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=hools" "Name=instance-state-name,Values=stopped" \
              --query "Reservations[*].Instances[*].InstanceId" --output text)
            if [ -n "$INSTANCE_ID" ]; then
              echo "Esperando que la instancia se inicie..."
              aws ec2 start-instances --instance-ids $INSTANCE_ID
              aws ec2 wait instance-running --instance-ids $INSTANCE_ID
              echo "EC2 iniciada con éxito."
            else
              echo "No se encontró una instancia detenida con la etiqueta 'hools'"
              exit 1
            fi

        - name: Obtener IP Pública de EC2
          id: get_ip
          run: |
            INSTANCE_ID=${{ secrets.AWS_INSTANCE_ID }}
            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            echo "La IP pública de la instancia es la siguinet (borrar): $PUBLIC_IP"
            echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

        - name: Conectarme a la EC2 con la SSH
          run: |
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
            chmod 600 private_key.pem
            # Guardar la clave para el siguiente paso
            echo "PRIVATE_KEY_PATH=private_key.pem" >> $GITHUB_ENV

        - name: Instalar Docker en EC2
          run: |
            ssh -i ${{ env.PRIVATE_KEY_PATH }}-o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ env.PUBLIC_IP }} << 'EOF'
              sudo yum update -y
              sudo yum install docker -y
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
              docker --version
            EOF

        
        #- name: Detener la instancia EC2
        #  run: |
        #    INSTANCE_ID=${{ secrets.AWS_INSTANCE_ID }}
        #    aws ec2 stop-instances --instance-ids $INSTANCE_ID
        #    echo "EC2 detenida."

        
            

        #- name: Ejecutar pruebas dentro del contenedor
        #  run: docker run prueba_cd -p 5000:5000

        #- name: Subir imagen a Docker Hub
        #  run: |
        #  echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        # docker tag myapp:latest myusername/myapp:latest
        #  docker push myusername/myapp:latest
  
